@using BlazorForms.Rendering.Types;
@using MudBlazor
@using BlazorForms.Rendering.State
@using BlazorForms.Rendering.Interfaces

<style>
    .grid-layout {
        display: grid;
        grid-template-columns: repeat(10, 80px);
        grid-template-rows: repeat(4, 160px);
        grid-gap: 14px;
    }

    .grid-item {
        min-width: 80px;
        min-height: 160px;
        overflow-wrap: anywhere;
    }

    .pz-dialog-form {
        padding: 0;
        max-width: 680px;
    }
</style>


@if (ViewModel.ModelUntyped == null)
{
    <MudText Typo="Typo.h6">No Model Found</MudText>
}
else
{
    @if (ViewModel.LayoutParams != null)
    {
        @*<MudContainer Style="max-height: 680px; overflow-y: scroll"></MudContainer>*@
        <div class="grid-layout" style="max-height: 680px; overflow-y: scroll; overflow-x: hidden;">
            @foreach (var element in ViewModel.LayoutParams.Elements!)
            {
                <div data-grid="@element" class="grid-item" style="grid-area: @GetGridAreaStyle(element);">
                   @* <DynamicComponent Type="@element.WidgetType" Parameters="@element.Parameters"></DynamicComponent>*@
                    <FormGroupContent Group="@element.Group" ModelValueChanged="@ModelChanged" />
                </div>
            }
        </div>
        
    }
    else
    {
        <div class="pz-dialog-form">
            @foreach (var group in ViewModel.FieldsGrouped)
            {
                <div id="pz-group-@group.Key" class="mat-layout-grid-cell mat-layout-grid-cell-span-@CellSpan">
                    <FormGroupContent Group="@group" ModelValueChanged="@ModelChanged" />
                </div>
            }
        </div>
    }
}

@code {

    [CascadingParameter]
    public IFormViewModel ViewModel { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    private string GetGridAreaStyle(LayoutFormElement element)
    {
        return $"{element.Row} / {element.Col} / span {element.RowSpan} / span {element.ColSpan}";
    }

    private async Task ModelChanged(ValueChangedArgs args)
    {
        await ModelValueChanged.InvokeAsync(args);
        //if (args.Operation != ModelChangedOperation.Default)
        //{
        //    StateHasChanged();
        //    if (args.Operation == ModelChangedOperation.Refresh)
        //    {               
        //        return;
        //    }
        //    else if (args.Operation == ModelChangedOperation.SubmitAndRefresh)
        //    {               
        //        await ModelValueChanged.InvokeAsync(args);
        //    }
        //}
    }

    private int CellSpan
    {
        get {
            switch (ViewModel.FieldsGrouped.Count())
            {
                case 1: return 12;
                default: return 6;
            }
        }
    }
}
