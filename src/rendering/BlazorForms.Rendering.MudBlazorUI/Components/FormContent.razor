@using MudBlazor
@using BlazorForms.Rendering.State
@using BlazorForms.Rendering.Interfaces

@if (ViewModel.ModelUntyped == null)
{
    <MudText Typo="Typo.h6">No Model Found</MudText>
}
else
{
    <div id="pz-form" class="mat-layout-grid" style="padding:0">
        <div class="mat-layout-grid-inner">
            @foreach (var group in ViewModel.FieldsGrouped)
            {
                <div id="pz-group-@group.Key" class="mat-layout-grid-cell mat-layout-grid-cell-span-@CellSpan">
                    <FormGroupContent Group="@group" ModelValueChanged="@ModelChanged" />
                </div>
            }
        </div>
    </div>
}

@code {

    [CascadingParameter]
    public IFormViewModel ViewModel { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    async Task ModelChanged(ValueChangedArgs args)
    {
        if (args.Operation != ModelChangedOperation.Default)
        {
            StateHasChanged();
            if (args.Operation == ModelChangedOperation.Refresh)
            {               
                return;
            }
            else if (args.Operation == ModelChangedOperation.SubmitAndRefresh)
            {               
                await ModelValueChanged.InvokeAsync(args);
            }
        }
    }

    private int CellSpan
    {
        get {
            switch (ViewModel.FieldsGrouped.Count())
            {
                case 1: return 12;
                default: return 6;
            }
        }
    }
}
