@using MudBlazor
@using BlazorForms.Rendering.State
@using BlazorForms.Flows.Definitions
@using BlazorForms.FlowRules
@using BlazorForms.Platform
@using BlazorForms.Shared
@using BlazorForms.Rendering.Interfaces
@using BlazorForms.Forms
@using Microsoft.JSInterop

@inject IFormViewModel _vm
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JS

@if (!Options.MudBlazorProvidersDefined)
{
    <MudThemeProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
}

@if (_vm.FormAccessDenied && !IsDefaultReadonlyView)
{
    <div>Form Access Denied</div>
    <MudDivider></MudDivider>
    <div>Assigned User: @_vm.FormAssignedUser</div>
}

<CascadingValue Value=FormOptions>

@if (_loading)
{
    <MudProgressLinear Indeterminate="true" Style="min-width: 50%; margin: auto;"></MudProgressLinear>
}
else if (string.IsNullOrEmpty(FlowName))
{
    <MudText Typo="Typo.h6">FlowName parameter must be provided</MudText>
}
else if (_vm.ModelUntyped == null)
{
    <MudText Typo="Typo.h6">Form Model Not Found</MudText>
}
else
{
    <MudGrid Spacing="1" Justify="Justify.Center" class="pz-grid-align pz-group-grid" style="padding:0">
        <MudItem xs="7">

    <div @onkeydown="@KeyPress" style="padding:0">
        <div style="justify-items:center">

            @if (!string.IsNullOrEmpty(_vm.FormData?.DisplayName))
            {
                <div>
                    <MudText Typo="Typo.h4">@_vm.FormData.DisplayName</MudText>
                </div>
            }

            <div>
                <CascadingValue Value="@_vm">
                    <FormContent ModelValueChanged=@ModelActionChanged />
                </CascadingValue>
            </div>

            <div style="min-width: 100%;" class="pz-progress">
                <MudProgressLinear Indeterminate="@_formLocked" Closed="@(!_formLocked)"></MudProgressLinear>
            </div>

            @*<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />*@

            @*buttons*@
            <div class="d-flex flex-row flex-grow-1 gap-2 justify-center">

                @if (_vm.ActionFields != null && _vm.ActionFields.Count() > 0)
                {
                    foreach (var action in _vm.ActionFields)
                    {
                        if (action.DisplayProperties.Visible)
                        {
                            <div class="d-inline-flex">
                                            <MudButton Id="@action.Name" Color="GetActionColor(action)" Disabled="@_formLocked"
                                       OnClick="@(async () => await ActionButtonClick(action.Binding.Binding, action.DisplayProperties.Caption))"
                                    Variant="Variant.Filled" DisableElevation="true" >@action.DisplayProperties.Caption</MudButton>
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="d-inline-flex">
                        <MudButton Variant="Variant.Outlined" Disabled="@_formLocked">Cancel</MudButton>
                    </div>

                    <div class="d-inline-flex">
                        <MudButton Variant="Variant.Filled" DisableElevation="true" Disabled="@_formLocked">@_vm.SaveActionName</MudButton>
                    </div>

                    @if (ValidateButton)
                    {
                        <div class="d-inline-flex">
                            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@ValidateClick" Disabled="@_formLocked">Validate</MudButton>
                        </div>
                    }


                    @if (!string.IsNullOrEmpty(_vm.RejectActionName))
                    {
                        <div class="d-inline-flex">
                            <MudButton Variant="Variant.Filled" OnClick="@(async() => await SubmitClick(_vm.RejectAction.Binding.Binding))" Disabled="@_formLocked">@_vm.RejectActionName</MudButton>
                        </div>
                    }

                    <div class="d-inline-flex">
                        <MudButton Variant="Variant.Filled" OnClick="@(async() => await SubmitClick(_vm.SubmitAction.Binding.Binding))" Disabled="@_formLocked">@_vm.SubmitActionName</MudButton>
                    </div>
                }
                
            </div>
        </div>
    </div>
        
        </MudItem>
    </MudGrid>
}
</CascadingValue>

@code {
    [Parameter]
    public EditFormOptions Options { get; set; } = new EditFormOptions();

    protected FormOptions FormOptions { get { return Options; } }

    [Parameter]
    public string Pk { get; set; }
    [Parameter]
    public virtual string FlowName { get; set; }

    [Parameter]
    public bool IsDefaultReadonlyView { get; set; }

    [Parameter]
    public string NavigationSuccess { get; set; }

    [Parameter]
    public string NavigationCancel { get; set; }

    [Parameter]
    public EventCallback<FormSubmittedArgs> FormSubmitted { get; set; }

    [Parameter]
    public bool ValidateButton { get; set; }

    [Parameter]
    public bool AllowAnonymousAccess { get; set; }

    [Parameter]
    public bool AllowFlowStorage { get; set; }

    [Parameter]
    public bool SupressExceptions { get; set; }

    private bool _loading = true;

    private bool _formLocked = false;

    private bool _dialogIsOpen = false;
    private string _matDialogTitle = string.Empty;
    private string _buttonBinding = string.Empty;

    private Color GetActionColor(FieldControlDetails action)
    {
        if (action.Binding.Binding == ModelBinding.SubmitButtonBinding)
        {
            return Color.Primary;
        }

        return Color.Default;
    }

    protected override async Task OnInitializedAsync()
    {
        //await Loader.LoadContentAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        // We load form once, and every time when parameters changed
        await Reload();
        await base.OnParametersSetAsync();
    }

    private async Task Reload()
    {
        try
        {
            _vm.SetBaseUri(_navigationManager.BaseUri);
            _vm.FormSettings.AllowAnonymousAccess = AllowAnonymousAccess;
            _vm.FormSettings.AllowFlowStorage = AllowFlowStorage;
            await _vm.InitiateFlow(FlowName, null, Pk);

            _loading = false;
            StateHasChanged();
        }
        catch (Exception exc)
        {
            _vm.PopulateException(exc);
            await ShowPopup();
        }
    }

    private async Task ProcessSubmit(bool loadForm = false, bool refresh = false, string binding = null)
    {
        _formLocked = true;
        StateHasChanged();

        try
        {
            if (binding == ModelBinding.CloseButtonBinding)
            {
                CancelClick();
                return;
            }

            var result = await _vm.TriggerRules(_vm.FormData.ProcessTaskTypeFullName, null, FormRuleTriggers.Submit);
            _vm.Validations = result.Validations.AsEnumerable().Union(_vm.GetDynamicFieldValidations());

            if (_vm.Validations.Any(v => v.ValidationResult == RuleValidationResult.Error))
            {
                await ShowAlert();
                //await MatDialogService.AlertAsync("Please fix issues with input fields above to Submit the form");
                return;
            }

            // To fix threads deadlock
            await Task.Run(async () =>
            {
                await _vm.SubmitForm(ModelBinding.SubmitButtonBinding);
            });

            var context = _vm.Context;

            // if next task is form again
            if (loadForm && context.ExecutionResult.IsFormTask)
            {
                await _vm.ReloadFormData();
            }
            else if (refresh)
            {
                _navigationManager.NavigateTo(_navigationManager.Uri, true);
            }
            else if (!string.IsNullOrEmpty(NavigationSuccess))
            {
                _navigationManager.NavigateTo(NavigationSuccess);
            }
            else
            {
                await FormSubmitted.InvokeAsync(new FormSubmittedArgs { Context = new BlazorForms.Flows.FlowContext(_vm.Context, _vm.ModelUntyped) });
            }
        }
        catch (Exception exc)
        {
            _vm.PopulateException(exc);
            await ShowPopup();
        }
        finally
        {
            _formLocked = false;
            StateHasChanged();
        }
    }

    private async Task ShowAlert()
    {
    }

    private async Task SubmitClick(string binding)
    {
        await ProcessSubmit(loadForm: true, binding: binding);
    }


    private async Task ModelActionChanged(ValueChangedArgs args)
    {
        if (args.Operation == ModelChangedOperation.Refresh)
        {
            _navigationManager.NavigateTo(_navigationManager.Uri, true);
        }
        else if (args.Operation == ModelChangedOperation.SubmitAndRefresh)
        {
            _loading = true;
            await ProcessSubmit(refresh: true);
        }
    }

    // to use from inherited forms
    protected virtual async Task ModelChanged(ValueChangedArgs args)
    {
        if (args.Operation != ModelChangedOperation.Default)
        {
            StateHasChanged();

            if (args.Operation == ModelChangedOperation.SubmitAndRefresh)
            {
                await ModelActionChanged(args);
            }
            return;
        }

        if (args.Binding.BindingType != BlazorForms.Shared.FieldBindingType.ActionButton)
        {
            _vm.ModelNaviSetValue(args.Binding.ResolvedBinding, args.NewValue);
        }
        try
        {
            await _vm.TriggerRules(_vm.FormData.ProcessTaskTypeFullName, args.Binding);
            StateHasChanged();
        }
        catch (Exception exc)
        {
            _vm.PopulateException(exc);
            await ShowPopup();
        }
    }

    protected FieldControlDetails GetField(string binding)
    {
        // ToDo: only one default group supported for POC
        var field = _vm.FieldsGrouped.First().First(f => f.Binding.Binding == binding);
        return field;
    }

    protected async Task KeyPress(KeyboardEventArgs e)
    {
        //if (e.Key == "Enter")
        //{
        //    await ProcessSubmit(loadForm: true);
        //}
        //else if (e.Key == "Escape")
        //{
        //    CancelClick();
        //}
    }

    protected void CancelClick()
    {
        if (!string.IsNullOrEmpty(NavigationCancel))
        {
            _navigationManager.NavigateTo(NavigationCancel);
        }
        else if (!string.IsNullOrEmpty(NavigationSuccess))
        {
            _navigationManager.NavigateTo(NavigationSuccess);
        }
    }

    protected async Task CancelFinishClick(string binding)
    {
        _formLocked = true;
        StateHasChanged();

        try
        {
            if (!string.IsNullOrEmpty(NavigationCancel))
            {
                _navigationManager.NavigateTo(NavigationCancel);
            }
            else if (!string.IsNullOrEmpty(NavigationSuccess))
            {
                _navigationManager.NavigateTo(NavigationSuccess);
            }
        }
        finally
        {
            _formLocked = false;
            StateHasChanged();
        }
    }

    protected async Task ValidateClick()
    {
        _formLocked = true;
        StateHasChanged();
        try
        {
            var result = await _vm.TriggerRules(_vm.FormData.ProcessTaskTypeFullName, null, FormRuleTriggers.Submit);
            _vm.Validations = result.Validations.AsEnumerable().Union(_vm.GetDynamicFieldValidations());
            StateHasChanged();
        }
        finally
        {
            _formLocked = false;
            StateHasChanged();
        }
    }

    protected async Task ActionButtonClick(string binding, string caption)
    {
        _formLocked = true;
        StateHasChanged();
        try
        {
            //await _vm.ActionButtonClick(binding);
            switch (binding)
            {
                case ModelBinding.CloseButtonBinding:
                    CancelClick();
                    break;

                case ModelBinding.CloseFinishButtonBinding:
                    await CancelFinishClick(binding);
                    break;

                case ModelBinding.ValidateButtonBinding:
                    await ValidateClick();
                    break;

                case ModelBinding.SubmitButtonBinding:
                    await ProcessSubmit(loadForm: true);
                    break;

                case ModelBinding.SubmitCloseButtonBinding:
                    await ProcessSubmit(loadForm: false);
                    break;

                case ModelBinding.SaveButtonBinding:
                    await ProcessSave(binding);
                    break;

                case ModelBinding.RejectButtonBinding:
                    await ProcessReject(binding, caption);
                    break;
            }
        }
        catch (Exception exc)
        {
            _vm.PopulateException(exc);
            await ShowPopup();
        }
        finally
        {
            _formLocked = false;
            StateHasChanged();
        }
    }

    protected async Task ProcessSave(string actionBinding)
    {
        await _vm.SaveForm(actionBinding, _vm.SaveActionName);
        _navigationManager.NavigateTo(NavigationSuccess);
    }

    private async Task SubmitDialog(MouseEventArgs args, bool isConfirmed)
    {
        if (isConfirmed)
        {
            _formLocked = true;
            StateHasChanged();

            try
            {
                if (_buttonBinding == ModelBinding.CloseButtonBinding)
                {
                    CancelClick();
                    return;
                }

                // ToDo: fix threads deadlock
                await Task.Run(async () =>
                {
                    await _vm.RejectForm(_buttonBinding, _vm.RejectActionName);
                });


                _navigationManager.NavigateTo(NavigationSuccess);

            }
            finally
            {
                _formLocked = false;
                StateHasChanged();
            }
        }
        _dialogIsOpen = false;
    }

    private async Task ProcessReject(string binding, string caption)
    {
        _dialogIsOpen = true;
        _matDialogTitle = $"{caption}?";
        _buttonBinding = binding;
    }

    protected async Task ShowPopup()
    {
        if (!SupressExceptions && _vm.ExceptionType != null && _vm.ExceptionType != typeof(FlowStopException).Name)
        {
            Snackbar.Add($"Operation failed. {_vm.ExceptionMessage}", Severity.Error);
        }

        await _vm.SaveException();
    }
}
