@using Microsoft.JSInterop
@using BlazorForms.Platform.Definitions.Shared
@using BlazorForms.Rendering.State
@using BlazorForms.Shared
@using BlazorForms.Platform
@using BlazorForms.Shared.Extensions;
@using BlazorForms.Rendering.Validation
@using BlazorForms.Flows.Definitions
@using BlazorForms.FlowRules
@using BlazorForms.Forms
@using BlazorForms.Shared.Reflection
@using System.Globalization
@using BlazorForms.Rendering.Types

@inject IDynamicFieldValidator FieldValidator
@inject IListFormViewModel ViewModel
@inject IDialogFormViewModel DialogVM
@inject NavigationManager _navigationManager
@inject IJSRuntime jsRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<style>
    .pz-table {
        margin-top: 40px;
    }

    .pz-ref-button {
        margin-left: 1rem;
        margin-top: 0.5rem;
        width: auto;
    }

    th.mud-table-cell {
        background-color: lightgray !important;
    }

</style>

@if (!Options.MudBlazorProvidersDefined)
{
    <MudThemeProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
}

<CascadingValue Value=Options.Variant>
<CascadingValue Value=ViewModel>

  
        <MudTable T="string[]" Items=GetListData() Hover="true" Breakpoint="Breakpoint.Sm" Dense="true" @ref="TableRef"
                  ToolBarContent=ToolBar PagerContent=Pager RowsPerPage=@GetPageSize() ServerData=GetServerDataDelegate()
            OnRowClick="@(async (args) => await @RowClickEvent(args))" Height=@GetHeight() 
            Virtualize=Options.Virtualize FixedHeader=Options.Virtualize>

        <HeaderContent>
            @if (ViewModel.VisibleColumns != null)
            {
                @foreach (var c in ViewModel.VisibleColumns!)
                {
                        var col = c;
                        <MudTh>@col?.DisplayProperties?.Caption</MudTh>
                }
            
                @if (ViewModel.ContextMenuActions != null)
                {
                        <MudTh>Actions</MudTh>
                }
            }

        </HeaderContent>

        <RowTemplate>
            @if (ViewModel.VisibleColumns != null)
            {
                @if (ViewModel.ListData.Length > 0)
                {
                    <MudTd hidden="hidden">@context[0]</MudTd>

                    @for (int i = 0; i < ViewModel.VisibleColumns.Count; i++)
                    {
                        var ind = i;
                        <MudTd style="white-space: pre;">@context[ind + 1]</MudTd>
                    }

                    @*Context Menu*@
                    @if (ViewModel.ContextMenuActions != null)
                    {
                        <MudTd style="white-space: pre;">
                            <ListFormRowContextMenu Pk="@context[0]" OnContextMenuItemClick="@(async args => await ContextMenuItemClick(args.Pk, args.Action))" />
                        </MudTd>
                    }

                }
                else
                {
                    <MudTd colspan="@ViewModel?.Columns?.Count" Class="pz-no-records-text"><MudText Typo="Typo.body2">No Records</MudText></MudTd>
                }

            }
        </RowTemplate>

    </MudTable>
    

    @*Ref Buttons*@
    @if (ViewModel.ReferenceButtonActions != null && ViewModel.ReferenceButtonActions.Count > 0)
    {
        <div class="mat-layout-grid mat-layout-grid-align-right">
            <div class="mat-layout-grid-cell">
                @foreach (var action in ViewModel.ReferenceButtonActions)
                {
                    <MudButton Variant="Variant.Filled" OnClick="@(async () => await RefButtonClick(action))" Class="pz-ref-button" Disabled="@FormLocked">@action</MudButton>
                }
            </div>
        </div>
    }

</CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public ListFormOptions Options { get; set; } = new ListFormOptions();

    [Parameter]
    public string FlowType { get; set; }

    [Parameter]
    public string PK { get; set; }

    [Parameter]
    public string ParentItemPk { get; set; }

    [Parameter]
    public FlowParamsGeneric FlowParams { get; set; }

    RenderFragment ToolBar { get; set; }
    RenderFragment Pager { get; set; }
    private MudTable<string[]> TableRef;

    //public MudTable<string[]> TableRef
    //{
    //    get { return _tableRef; }
    //    set
    //    {
    //        _tableRef = value;
    //        //_tableRef.ReloadServerData();
    //    }
    //}

    int GetPageSize()
    {
        if (Options.ShowPagination)
        {
            return Options.PageSize;
        }

        return 20;
    }

    private async Task<TableData<string[]>> ServerReload(TableState state)
    {
        ViewModel.QueryOptions.SearchString = _searchString;
        ViewModel.QueryOptions.AllowPagination = Options.ShowPagination;

        if (Options.ShowPagination)
        {
            ViewModel.QueryOptions.PageIndex = state.Page;
            ViewModel.QueryOptions.PageSize = state.PageSize;
        }

        await Reload();
        var result = new TableData<string[]> { Items = GetListData(), TotalItems = ViewModel.QueryOptions.PageReturnTotalCount };
        return result;
    }

    Func<TableState, Task<TableData<string[]>>> GetServerDataDelegate()
    {
        return Options.ServerSideDataOptimization ? new Func<TableState, Task<TableData<string[]>>>(ServerReload) : null;
    }

    //Action<IEnumerable<string[]>> GetItemsDelegate()
    //{
    //    return Options.ServerSideDataOptimization ? null : new Action<IEnumerable<string[]>>(GetListData);
    //}

    void RefreshCustomContent()
    {
        if (Options.ShowSearch)
        {
            ToolBar = (builder) =>
            {
                builder.OpenComponent(0, typeof(ToolBarFragment));
                builder.AddAttribute(1, "Caption", Options.ToolBarCaption);
                builder.AddAttribute(2, "OnSearch", new EventCallback<string>(this, OnSearch));
                builder.CloseComponent();
            };
        }
        else
        {
            ToolBar = null;
        }

        if (Options.ShowPagination)
        {
            Pager = (builder) =>
            {
                builder.OpenComponent(0, typeof(MudTablePager));
                builder.AddAttribute(0, "PageSizeOptions", Options.PageSizeOptions);
                builder.CloseComponent();
            };
        }
        else
        {
            Pager = null;
        }

        StateHasChanged();
    }

    private string _searchString;

    private IEnumerable<FormDetails> _fields;

    private bool loading = true;
    private bool FormLocked = false;
    string DialogPk = null;

    private string GetHeight()
    {
        if (Options.Virtualize)
        {
            return "680px";
        }
        else
        {
            return "";
        }
    }

    //BaseMatIconButton MainMenuButton;
    //BaseMatMenu MainMenu;

    protected override async Task OnParametersSetAsync()
    {
        // update custome rendering
        RefreshCustomContent();

        // We load form once, and every time when parameters changed

        if (Options.ServerSideDataOptimization)
        {
            //TableRef.ReloadServerData();
        }
        else
        {
            await Reload();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    protected override async Task OnInitializedAsync()
    {        
    }

    private async Task Reload()
    {
        try
        {
            var flowParams = FlowParams ?? new FlowParamsGeneric();
            flowParams.ItemId = ParentItemPk;
            ViewModel.QueryOptions.AllowPagination = Options.ShowPagination;

            //if (Options.ServerSideDataOptimization)
            {
                if (ViewModel.QueryOptions.PageSize == 0)
                {
                    ViewModel.QueryOptions.PageSize = Options.PageSize;
                }
            }

            await ViewModel.LoadListForm(FlowType, PK, flowParams, true);

            loading = false;
            StateHasChanged();
        }
        catch (Exception exc)
        {
            ViewModel.PopulateException(exc);
            await ShowPopup();
        }
    }

    //private async Task MainMenuClick()
    //{
    //    try
    //    {
    //        await MainMenu.OpenAsync(MainMenuButton.Ref);
    //    }
    //    catch (Exception exc)
    //    {
    //        ViewModel.PopulateException(exc);
    //    }
    //    finally
    //    {
    //        await ShowPopup();
    //    }
    //}

    private async Task MainMenuItemClick(string action)
    {
        try
        {
            await ViewModel.NavigateActionFlow(action);
        }
        catch (Exception exc)
        {
            ViewModel.PopulateException(exc);
            await ShowPopup();
        }
    }

    private async Task RefButtonClick(string action)
    {
        FormLocked = true;
        try
        {
            var flowAction = ViewModel.ReferenceButtonActionsDictionary[action];
            if (flowAction.Operation == FlowReferenceOperation.DialogForm)
            {
                var flowParams = FlowParams ?? new FlowParamsGeneric();
                flowParams.ItemId = "";
                flowParams.Operation = flowAction.Operation;
                flowParams[PlatformConstants.BaseUri] = _navigationManager.BaseUri;

                DialogPk = "";
                await Task.Run(async () =>
                {
                    await DialogVM.LoadDialog(flowAction.FlowFullName, flowParams);
                });

                ShowDialog();
            }
            else if (flowAction.IsNavigation)
            {
                var path = string.Format(flowAction.NavigationFormat);
                _navigationManager.NavigateTo(path);
            }
            else
            {
                await ViewModel.NavigateReferenceButtonActionFlow(action);
            }
            StateHasChanged();
        }
        catch (Exception exc)
        {
            ViewModel.PopulateException(exc);
            await ShowPopup();
        }
        finally
        {
            FormLocked = false;
        }
    }

    private void ShowDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogParameters = new DialogParameters();
        dialogParameters["DialogViewModel"] = DialogVM;
        dialogParameters["FormSubmitted"] = new EventCallback<FormSubmittedArgs>(this, DialogFormSubmitted);
        dialogParameters["AllowAnonymousAccess"] = Options.AllowAnonymousAccess;
        dialogParameters["AllowFlowStorage"] = Options.AllowFlowStorage;
        dialogParameters["Variant"] = Options.Variant;
        DialogService.Show<FlowDialogForm>(null, dialogParameters, options);
    }

    private string[][] GetListData()
    {
        //return ViewModel.ListData?.Length > 0 ? ViewModel.ListData : new string[1][] { Enumerable.Range(0, ViewModel.Columns.Count).Select(i => string.Empty).ToArray() };
        return ViewModel.ListData;
    }

    private async Task ContextMenuItemClick(string pk, string action)
    {
        try
        {
            DialogPk = pk;

            var flowAction = ViewModel.ContextMenuActionsDictionary[action];

            if (flowAction.IsNavigation)
            {
                var path = string.Format(flowAction.NavigationFormat, pk);

                if (flowAction.Operation == FlowReferenceOperation.OpenInNewTab)
                {
                    await jsRuntime.InvokeAsync<object>("open", path, "_blank");
                }
                else
                {
                    _navigationManager.NavigateTo(path);
                    StateHasChanged();
                }
            }
            else
            {
                if (flowAction.Operation == FlowReferenceOperation.QuickAction)
                {
                    // Action Flow
                    await Task.Run(async () =>
                    {
                        var flowParams = FlowParams ?? new FlowParamsGeneric();
                        flowParams.ItemId = pk;
                        flowParams.Operation = flowAction.Operation;

                        await ViewModel.RunActionFlow(flowAction.FlowFullName, flowParams);
                    });

                    await ShowNotification(flowAction.Name);
                }
                else
                {
                    // Dialog Action
                    var flowParams = FlowParams ?? new FlowParamsGeneric();
                    flowParams.ItemId = pk;
                    flowParams.Operation = flowAction.Operation;
                    flowParams[PlatformConstants.BaseUri] = _navigationManager.BaseUri;

                    await Task.Run(async () =>
                    {
                        await DialogVM.LoadDialog(flowAction.FlowFullName, flowParams);
                    });

                    ShowDialog();

                    var warnings = DialogVM.Validations.Where(v => v.ValidationResult == RuleValidationResult.Error).ToList();

                    if (warnings.Count > 0)
                    {
                        foreach (var w in warnings)
                        {
                            await ShowWarning(w.ValidationMessage);
                        }
                    }
                    StateHasChanged();

                }
            }
        }
        catch (Exception exc)
        {
            ViewModel.PopulateException(exc);
            await ShowPopup();
        }
    }

    private async Task RowClickEvent(TableRowClickEventArgs<string[]> args)
    {
        await RowOnClick(args.Item[0]);
    }

    private async Task RowOnClick(string pk)
    {
        try
        {
            if (ViewModel.ContextMenuActions != null)
            {
                if (ViewModel.ContextMenuActions.Count > 0)
                {
                    DialogPk = pk;

                    var flowAction = ViewModel.ContextMenuActionsDictionary[ViewModel.ContextMenuActions[0]];

                    if (flowAction.IsNavigation)
                    {
                        var path = string.Format(flowAction.NavigationFormat, pk);
                        _navigationManager.NavigateTo(path);
                    }
                    else
                    {
                        await Task.Run(async () =>
                        {
                            var flowParams = FlowParams ?? new FlowParamsGeneric();
                            flowParams.ItemId = pk;
                            flowParams.Operation = flowAction.Operation;
                            flowParams[PlatformConstants.BaseUri] = _navigationManager.BaseUri;

                            await DialogVM.LoadDialog(flowAction.FlowFullName, flowParams);
                        });

                        ShowDialog();
                    }

                    StateHasChanged();
                }
            }
        }
        catch (Exception exc)
        {
            ViewModel.PopulateException(exc);
            await ShowPopup();
        }
    }

    private async Task OnSelected(string pk)
    {
        DialogPk = pk;
        StateHasChanged();
    }

    private async Task DialogFormSubmitted(FormSubmittedArgs args)
    {
        var flowParams = FlowParams ?? new FlowParamsGeneric();
        flowParams.ItemId = ParentItemPk;

        await ViewModel.LoadListForm(FlowType, PK, flowParams);
        DialogPk = null;
        StateHasChanged();
    }

    public async Task ShowPopup()
    {
        if (!Options.SupressExceptions && ViewModel.ExceptionType != null && ViewModel.ExceptionType != typeof(FlowStopException).Name)
        {
            Snackbar.Add($"Operation failed. {ViewModel.ExceptionMessage}", Severity.Error);
        }

        await ViewModel.SaveException();
    }

    public async Task ShowNotification(string message)
    {
        Snackbar.Add(message, Severity.Success);
    }

    //public async Task SortData(MatSortChangedEvent sort)
    //{
    //    var direction = new SortDirection();
    //    switch (sort.Direction)
    //    {
    //        case MatSortDirection.None:
    //            direction = SortDirection.None;
    //            break;
    //        case MatSortDirection.Asc:
    //            direction = SortDirection.Desc;
    //            break;
    //        case MatSortDirection.Desc:
    //            direction = SortDirection.Asc;
    //            break;
    //        default:
    //            break;
    //    }
    //    ViewModel.QueryOptions.SortColumn = sort.SortId.ToString();
    //    ViewModel.QueryOptions.SortDirection = direction;
    //    ViewModel.QueryOptions.AllowSort = true;
    //    await ViewModel.LoadListForm(FlowType, PK, FlowParams);
    //}

    public async Task ShowWarning(string message)
    {
        Snackbar.Add(message, Severity.Warning);
    }

    async Task ModelChanged(ValueChangedArgs args)
    {
        StateHasChanged();
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        TableRef.ReloadServerData();
    }
}
