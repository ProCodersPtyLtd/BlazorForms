@using BlazorForms.Rendering.State
@using MudBlazor
@using BlazorForms.Forms
@using BlazorForms.FlowRules
@using Microsoft.AspNetCore.Components.Web

<MudTextField Value="@TextValue" Disabled="@Field.DisplayProperties.Disabled" Required="@Field.DisplayProperties.Required"
              OnInternalInputChanged=@(args => { ValueChanged(args); }) Style="width: 100%;" Variant="FormOptions.Variant"></MudTextField>

<ValidatorControl Validations="@Validations"></ValidatorControl>

@code {
    [CascadingParameter]
    public FormOptions FormOptions { get; set; }

    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public FieldControlDetails Field { get; set; }
    [Parameter]
    public string Caption { get; set; }
    [Parameter]
    public string Name { get; set; }
    //[Parameter]
    //public string ModelBinding { get; set; }
    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public string TextValue { get; set; }

    [Parameter]
    public IEnumerable<RuleExecutionResult> Validations { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }

    void ValueChanged(ChangeEventArgs args)
    {
        TextValue = (string)args.Value;
        ModelValueChanged.InvokeAsync(new ValueChangedArgs { Binding = Field.Binding, NewValue = TextValue });
    }
}
