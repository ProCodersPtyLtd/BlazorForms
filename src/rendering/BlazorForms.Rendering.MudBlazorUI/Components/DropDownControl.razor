@using BlazorForms.Rendering.State
@using BlazorForms.Shared
@using MudBlazor
@using BlazorForms.Forms
@using BlazorForms.FlowRules
@using BlazorForms.Rendering.Validation

@inject IDynamicFieldValidator FieldValidator

@if (Field.DisplayProperties.Disabled)
{
    var value = string.IsNullOrEmpty(TextValue) ? TextValue : _items[TextValue];

    <MudTextField T="string" Value="@value" Disabled="@true" Style="width: 100%;"></MudTextField>
}
else
{
    <MudSelect Value="@TextValue" T="string" ValueChanged="@(args => ValueChanged(args))" Style="width: 100%;"
           Variant="Variant" AnchorOrigin="Origin.BottomCenter">
        @foreach (var item in _items)
        {
            <MudSelectItem Value="@item.Key">@item.Value</MudSelectItem>
        }
    </MudSelect>
}

<ValidatorControl Validations="@AllValidations"></ValidatorControl>

@code {
    [CascadingParameter]
    public Variant Variant { get; set; }

    [CascadingParameter]
    public IFormViewModel ViewModel { get; set; }

    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public FieldControlDetails Field { get; set; }
    [Parameter]
    public string Caption { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string ModelBinding { get; set; }
    [Parameter]
    public string ItemsBinding { get; set; }
    [Parameter]
    public string IdBinding { get; set; }
    [Parameter]
    public string NameBinding { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public string TextValue { get; set; }

    [Parameter]
    public IEnumerable<RuleExecutionResult> Validations { get; set; }

    private IEnumerable<RuleExecutionResult> AllValidations
    {
        get
        {
            return FieldValidator.PrepareValidations(Validations, _localValidation);

        }
    }

    private RuleExecutionResult _localValidation;
    private IDictionary<string, string> _items;

    protected override async Task OnInitializedAsync()
    {
        //var items = ViewModel.ModelNaviGetItems(ItemsBinding);
        var items = ViewModel.FieldGetItemsValue(ViewModel.ModelUntyped, Field.Binding);

        _items = items.ToDictionary(
            i => ViewModel.FieldGetIdValue(i, Field.Binding).AsString(),
            i => ViewModel.FieldGetNameValue(i, Field.Binding).AsString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    }

    void ValueChanged(string val)
    {
        TextValue = val;
        _localValidation = FieldValidator.Validate(Field, val);
        ModelValueChanged.InvokeAsync(new ValueChangedArgs { Binding = Field.Binding, NewValue = TextValue, RowIndex = RowIndex });
    }
}
