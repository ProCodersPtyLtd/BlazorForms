@using BlazorForms.Rendering.State
@using MudBlazor
@using BlazorForms.Forms
@using BlazorForms.FlowRules
@using BlazorForms.Rendering.Validation
@using BlazorForms.Shared

@inject IDynamicFieldValidator FieldValidator

<style>
    .mud-card-header {
        padding: 7px !important;
    }

    .pz-list-card {
        margin-bottom: 4px;
    }
</style>

@*<MudTextField id="@MyId" Value="@ObjectValue.AsString()" Disabled="@Field.DisplayProperties.Disabled" 
              T="string" ValueChanged="@(a => ValueChanged(a))" InputType="@MyType" Style="width: 100%;" Variant="FormOptions.Variant" />*@

<MudCard Class="pz-list-card">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.subtitle1">@((MarkupString)GetTitle())</MudText>
        </CardHeaderContent>
@*        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
        </CardHeaderActions>*@
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.EditNote" Color="Color.Default" />
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body2">@((MarkupString)GetText())</MudText>
        @*<MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>*@
    </MudCardContent>
    @*<MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
    </MudCardActions>*@
</MudCard>

@code {
    [CascadingParameter]
    public FormOptions FormOptions { get; set; }

    [CascadingParameter]
    public IFormViewModel ViewModel { get; set; }

    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public FieldControlDetails Field { get; set; }
    [Parameter]
    public string Caption { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public EventCallback<ValueChangedArgs> ModelChanged { get; set; }

    [Parameter]
    public object Item { get; set; }

    private string MyId
    {
        get
        {
            return $"{Field.Group}-{Field.Name}-{Field.Caption}-{RowIndex}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
    }

    private string GetTitle()
    {
        string result = null;
        var title = Field.FindField(ControlType.CardTitle);

        if (title != null)
        {
            result = ViewModel.FieldGetValue(Item, title.Binding).AsString();
        }

        return result;
    }

    private string GetText()
    {
        string result = null;
        var body = Field.FindField(ControlType.CardBody);

        if (body != null)
        {
            result = ViewModel.FieldGetValue(Item, body.Binding).AsString();
        }

        return result;
    }

    
}
