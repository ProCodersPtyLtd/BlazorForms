@using BlazorForms.Rendering.State
@using MudBlazor
@using BlazorForms.Forms
@using BlazorForms.FlowRules
@using BlazorForms.Rendering.Validation

@inject IDynamicFieldValidator FieldValidator

<MudTextField Value="@TextValue" ReadOnly="@Field.DisplayProperties.Disabled" Required="@Field.DisplayProperties.Required" Lines="3" FullWidth="true"
              T="string" ValueChanged="@(a => ValueChanged(a))" Label="@Field.DisplayProperties.Caption" Style="width: 100%;" Variant="Variant.Filled"/>

<ValidatorControl Validations="@AllValidations"></ValidatorControl>

@code {
    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public FieldControlDetails Field { get; set; }
    [Parameter]
    public string Caption { get; set; }
    [Parameter]
    public string Name { get; set; }
    //[Parameter]
    //public string ModelBinding { get; set; }
    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public string TextValue { get; set; }

    [Parameter]
    public IEnumerable<RuleExecutionResult> Validations { get; set; }

    private RuleExecutionResult _localValidation;
    private IEnumerable<RuleExecutionResult> AllValidations {  get { return FieldValidator.PrepareValidations(Validations, _localValidation); } }

    protected override async Task OnInitializedAsync()
    {
    }

    void ValueChanged(string val)
    {
        TextValue = val;
        _localValidation = FieldValidator.Validate(Field, val);
        ModelValueChanged.InvokeAsync(new ValueChangedArgs { Binding = Field.Binding, NewValue = TextValue, RowIndex = RowIndex });
    }
}
