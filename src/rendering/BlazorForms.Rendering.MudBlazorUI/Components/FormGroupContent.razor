@using MudBlazor
@using BlazorForms.Rendering.State
@using BlazorForms.FlowRules
@using BlazorForms.Forms
@using BlazorForms.Flows.Definitions
@using BlazorForms.Shared
@using BlazorForms.Rendering.Interfaces

@inject ISnackbar Snackbar
@inject NavigationManager _NavigationManager

<style>
    .pz-grid-align {
        align-items: center;
    }

    .pz-clean-margin {
        margin: 0px;
    }

    .pz-group-grid {
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
</style>

@if (!string.IsNullOrEmpty(Group.Key))
{
    <MudText Typo="Typo.h6" class="pz-clean-margin">@Group.Key</MudText>
}

        <MudGrid Spacing="1" Justify="Justify.Center" class="pz-grid-align">

        @foreach (var field in Group)
        {
            @if (field.ControlType == null || field.DisplayProperties?.Visible == false 
                || field.Binding.BindingType == BlazorForms.Shared.FieldBindingType.TableColumn
                || field.Binding.BindingType == BlazorForms.Shared.FieldBindingType.TableColumnSingleSelect
                || field.Binding.BindingType == BlazorForms.Shared.FieldBindingType.TableColumnContextMenu)
            {
                continue;
            }

            @if (field.ControlType == "TableOld")
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" class="pz-subtitle2">@field.DisplayProperties.Caption</MudText> 
                </MudItem>

                <MudItem xs="12">
                    <GridControl Table="field" Columns="@ViewModel.Tables[field.Binding.TableBinding]" Caption="@field.DisplayProperties.Caption"
                                 Validations="@GetValidations(field.Binding.ResolvedBinding)" />
                </MudItem>

                continue;
            }
            else if (field.ControlType == "Table")
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" class="pz-subtitle2">@field.DisplayProperties.Caption</MudText>
                </MudItem>

                <MudItem xs="12">
                    <GridControl Table="field" Columns="@ViewModel.Tables[field.Binding.TableBinding]" Caption="@field.DisplayProperties.Caption"
                                 ModelChanged="@ModelChanged" Validations="@GetValidations(field.Binding.ResolvedBinding)" />
                </MudItem>
                continue;
            }
            else if (field.ControlType == "Repeater")
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" class="pz-subtitle2">@field.DisplayProperties.Caption</MudText>
                </MudItem>

                <MudItem xs="12">
                    <RepeaterControl Table="field" Columns="@ViewModel.Repeaters[field.Binding.TableBinding]" Caption="@field.DisplayProperties.Caption"
                                     Validations="@GetValidations(field.Binding.ResolvedBinding)" ModelValueChanged="@ModelChanged" />
                </MudItem>
                continue;
            }
            else if (field.ControlType == "SelectableList")
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" class="pz-subtitle2">@field.DisplayProperties.Caption</MudText>
                </MudItem>

                <MudItem xs="12">
                    <SelectableListControl Table="field" Data="@ViewModel.GetSelectableListData(field)" Caption="@field.DisplayProperties.Caption"
                                           ModelValueChanged="@ModelChanged" Validations="@GetValidations(field.Binding.ResolvedBinding)" />
                </MudItem>
                continue;
            }
            else if (field.ControlType == "TextArea" || field.ControlType == "Header" || field.ControlType == "Subtitle")
            {
                <MudItem xs="12" class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                    <SimpleControl ModelChanged="@ModelChanged" ModelBinding="" Field="@field" />
                </MudItem>
            }
            else if (field.ControlType == "Label")
            {
               @if (field.DisplayProperties.NoCaption == true)
                {
                    <MudItem xs="12" class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                        <SimpleControl ModelChanged="@ModelChanged" ModelBinding="" Field="@field" />
                    </MudItem>
                }
                else
                {
                    <MudItem xs="6" class="mat-layout-grid-cell mat-layout-grid-cell-span-6 mat-subtitle2">
                        <MudText Typo="Typo.subtitle2" class="pz-subtitle2">@field.DisplayProperties.Caption</MudText>
                    </MudItem>
                        
                    <MudItem xs="6" class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                        <SimpleControl ModelChanged="@ModelChanged" ModelBinding="" Field="@field" />
                    </MudItem>
                }
            }
            else
            {
                @if (field.Binding.BindingType == BlazorForms.Shared.FieldBindingType.ActionButton)
                {
                    <MudItem xs="12" class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                        <SimpleControl ModelChanged="@ModelChanged" ModelBinding="" Field="@field" />
                    </MudItem>
                }
                else
                {
                    @if (field.DisplayProperties.Required)
                    {
                        <MudItem xs="6" class="mat-layout-grid-cell mat-layout-grid-cell-span-6 mat-subtitle2">
                            <MudText Typo="Typo.subtitle2" class="pz-subtitle2">@field.DisplayProperties.Caption *</MudText>
                        </MudItem>
                    }
                    else
                    {
                        <MudItem xs="6" class="mat-layout-grid-cell mat-layout-grid-cell-span-6 mat-subtitle2">
                            <MudText Typo="Typo.subtitle2" class="pz-subtitle2">@field.DisplayProperties.Caption</MudText>
                        </MudItem>
                    }

                        <MudItem xs="6" class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                       <SimpleControl ModelChanged="@ModelChanged" ModelBinding="" Field="@field" />
                    </MudItem>
                }

            }
        }

        </MudGrid>




@code {

    [CascadingParameter]
    public IFormViewModel ViewModel { get; set; }

    [Parameter]
    public IGrouping<string, FieldControlDetails> Group { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    async Task ModelChanged(ValueChangedArgs args)
    {
        if (args.Operation != ModelChangedOperation.Default)
        {
            StateHasChanged(); 

            if (args.Operation == ModelChangedOperation.SubmitAndRefresh)
            {              
                await ModelValueChanged.InvokeAsync(args);                
            }  
            return;
        }        

        if (args.Binding.BindingType != BlazorForms.Shared.FieldBindingType.ActionButton)
        {
            //ViewModel.ModelNaviSetValue(args.Binding.ResolvedBinding, args.NewValue);
            ViewModel.FieldSetValue(ViewModel.ModelUntyped, args.Binding, args.NewValue);
        }
        try
        {
            await ViewModel.TriggerRules(ViewModel.FormData.ProcessTaskTypeFullName, args.Binding);
            StateHasChanged();
        }
        catch (Exception exc)
        {
            ViewModel.PopulateException(exc);
            await ShowPopup();
        }
    }

    IEnumerable<RuleExecutionResult> GetValidations(string modelBinding)
    {
        return ViewModel.Validations.Where(v => v.AffectedField == modelBinding);
    }

    public async Task ShowPopup()
    {
        if (ViewModel.ExceptionType != null && ViewModel.ExceptionType != typeof(FlowStopException).Name)
        {
            Snackbar.Add("Operation failed. Please notify BlazorForms Support", Severity.Error);
            await ViewModel.SaveException();
        }
    }

}
