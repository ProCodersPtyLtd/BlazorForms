@using BlazorForms.Rendering.State
@using MudBlazor
@using BlazorForms.Forms
@using BlazorForms.FlowRules
@using BlazorForms.Rendering.Validation
@using BlazorForms.Shared

@inject IDynamicFieldValidator FieldValidator

<MudTextField id="@MyId" Value="@ObjectValue.AsString()" Disabled="@Field.DisplayProperties.Disabled" 
              T="string" ValueChanged="@(a => ValueChanged(a))" InputType="@MyType" Style="width: 100%;" Variant="FormOptions.Variant" />

<ValidatorControl Validations="@AllValidations"></ValidatorControl>

@code {
    [CascadingParameter]
    public FormOptions FormOptions { get; set; }

    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public FieldControlDetails Field { get; set; }
    [Parameter]
    public string Caption { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public object ObjectValue { get; set; }

    [Parameter]
    public IEnumerable<RuleExecutionResult> Validations { get; set; }

    [Parameter]
    public bool Password { get; set; }

    private string MyId
    {
        get
        {
            return $"{Field.Group}-{Field.Name}-{Field.Caption}-{RowIndex}";
        }
    }

    private InputType MyType
    {
        get
        {
            return Password ? InputType.Password : InputType.Text;
        }
    }

    private RuleExecutionResult _localValidation;
    private IEnumerable<RuleExecutionResult> AllValidations {  get { return FieldValidator.PrepareValidations(Validations, _localValidation); } }

    protected override async Task OnInitializedAsync()
    {
    }

    void ValueChanged(string val)
    {
        object newValue = val;

        if (ObjectValue != null)
        {
            try
            {
                newValue = Convert.ChangeType(val, ObjectValue.GetType());
            }
            catch
            {
                newValue = Activator.CreateInstance(ObjectValue.GetType());
            }
        }

        ObjectValue = newValue;

        _localValidation = FieldValidator.Validate(Field, val);
        ModelValueChanged.InvokeAsync(new ValueChangedArgs { Binding = Field.Binding, NewValue = newValue, RowIndex = RowIndex });
    }
}
