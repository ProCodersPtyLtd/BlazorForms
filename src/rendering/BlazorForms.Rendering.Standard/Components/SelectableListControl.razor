@using BlazorForms.Rendering.State
@using MatBlazor
@using BlazorForms.Forms
@using BlazorForms.FlowRules
@using BlazorForms.Platform

@inject IUserViewDataResolver DataResolver

@if (Data != null && Data.Count > 0)
{
    <MatList SingleSelection="true" TwoLine="true" Style="width: 100%;">
        @foreach (var item in Data)
        {
            <MatListItem Id="@item.Id.ToString()"  OnClick="@(args => OnClick(item.Id))">
                <MatListItemText>
                    <MatListItemPrimaryText>@item.PrimaryText</MatListItemPrimaryText>
                    <MatListItemSecondaryText>@item.SecondaryText</MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
        }
    </MatList>
}

<ValidatorControl Validations="@Validations"></ValidatorControl>

@code {
    [Parameter]
    public FieldControlDetails Table { get; set; }
    [Parameter]
    public string Caption { get; set; }

    [Parameter]
    public IEnumerable<RuleExecutionResult> Validations { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public List<SelectableListItem> Data { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //Data = GetData();
    }

    private void OnClick(int id)
    {
        var item = Data.FirstOrDefault(x => x.Id == id).Object;
        //ModelValueChanged.InvokeAsync(new ValueChangedArgs { ModelBinding = Table.ModelTargetBinding, NewValue = item });
        ModelValueChanged.InvokeAsync(new ValueChangedArgs { Binding = Table.Binding, NewValue = item });
    }
}
