@using MatBlazor
@using BlazorForms.Rendering.State
@using BlazorForms.Flows.Definitions
@using BlazorForms.FlowRules
@using BlazorForms.Platform
@using BlazorForms.Shared

@inject IFlowRunProvider _flowRunProvider
@inject IDynamicFormContentController _contentController
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService

@if (_contentController.FormAccessDenied && !IsDefaultReadonlyView)
{
    @*if (FlowRunId != 0 && !_navigationManager.Uri.Contains($"readonly-form-generic/{FlowRunId}/true"))
        {
            _navigationManager.NavigateTo($"readonly-form-generic/{FlowRunId}/true", true);
        }
        else *@
    {
        <div>Form Access Denied</div>
        <hr />
        <div>Assigned User: @_contentController.FormAssignedUser</div>
    }
}

@if (_loading)
{
    <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" class="w-50"></RadzenProgressBar>
}
else if (string.IsNullOrEmpty(FlowName))
{
    <RadzenHeading Size="H6">FlowName parameter must be provided</RadzenHeading>
}
else if (_contentController.Model == null)
{
    <RadzenHeading Size="H6">Form Model Not Found</RadzenHeading>
}
else
{
    <div class="container" @onkeydown="@KeyPress">
        <div class="content" style="justify-items:center">

            @if (!string.IsNullOrEmpty(_contentController.FormData?.DisplayName))
            {
                <div class="col col-12">
                    <RadzenHeading Size="H4">@_contentController.FormData.DisplayName</RadzenHeading>
                </div>
            }

            <div class="col col-12">
                <DynamicFormContent Controller="@_contentController" ModelValueChanged="@ModelChanged" />
            </div>

            <div class="col col-12">
                <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" Visible="@_formLocked" />
            </div>

            @*buttons*@
            <div class="col col-12">
                <div style="display:flex;">

                    @if (_contentController.ActionFields != null && _contentController.ActionFields.Count() > 0)
                    {
                        @foreach (var action in _contentController.ActionFields)
                        {
                            @if (action.DisplayProperties.Visible)
                            {
                                <RadzenButton Id="@action.Name" ButtonStyle="ButtonStyle.Light" Disabled="@_formLocked" Click="@(async () => await ActionButtonClick(action.Binding.Binding, action.DisplayProperties.Caption))" Text="@action.DisplayProperties.Caption" />
                            }
                        }
                    }
                    else
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Disabled="@_formLocked" Text="Cancel" />
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Disabled="@_formLocked" Text="@_contentController.SaveActionName" />

                        @if (ValidateButton)
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Click="@ValidateClick" Disabled="@_formLocked" Text="Validate" />
                        }

                        @if (!string.IsNullOrEmpty(_contentController.RejectActionName))
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@(async() => await SubmitClick(_contentController.RejectAction.Binding.Binding))" Disabled="@_formLocked" Text="@_contentController.RejectActionName" />
                        }

                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@(async() => await SubmitClick(_contentController.SubmitAction.Binding.Binding))" Disabled="@_formLocked" Text="@_contentController.SubmitActionName" />
                    }
                </div>
            </div>
        </div>
    </div>

    <MatDialog @bind-IsOpen="@_alertDialogIsOpen">
        <MatDialogTitle>Please fix issues with input fields to Submit the form</MatDialogTitle>
        <MatDialogActions>
            <MatButton OnClick="@(e => { _alertDialogIsOpen = false; })">OK</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@_dialogIsOpen">
        <MatDialogTitle>@_matDialogTitle</MatDialogTitle>
        <MatDialogActions>
            <MatButton OnClick="@(async (args) => await SubmitDialog(args, false))">No</MatButton>
            <MatButton OnClick="@(async (args) => await SubmitDialog(args, true))">Yes</MatButton>
        </MatDialogActions>
    </MatDialog>
}
<MatPortalHost></MatPortalHost>

@code {
    private bool _loading = true;

    private bool _formLocked = false;

    private bool _alertDialogIsOpen = false;

    private bool _dialogIsOpen = false;
    private string _matDialogTitle = string.Empty;
    private string _buttonBinding = string.Empty;

    [Parameter]
    public string Pk { get; set; }
    [Parameter]
    public string FlowName { get; set; }

    [Parameter]
    public bool IsDefaultReadonlyView { get; set; }

    [Parameter]
    public string NavigationSuccess { get; set; }

    [Parameter]
    public string NavigationCancel { get; set; }

    [Parameter]
    public EventCallback<FormSubmittedArgs> FormSubmitted { get; set; }

    [Parameter]
    public bool ValidateButton { get; set; }

    [Parameter]
    public bool AnonymousAccess { get; set; }

    async Task ModelChanged(ValueChangedArgs args)
    {
        if (args.Operation == ModelChangedOperation.Refresh)
        {
            _navigationManager.NavigateTo(_navigationManager.Uri, true);
        }
        else if (args.Operation == ModelChangedOperation.SubmitAndRefresh)
        {
            _loading = true;
            await ProcessSubmit(refresh: true);
        }       
    }

    private void KeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ProcessSubmit(true);
        }
        else if (e.Key == "Escape")
        {
            CancelClick();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                _contentController.AnonymousAccess = AnonymousAccess;
                _contentController.NoFlowStorage = true;
                await _contentController.InitiateFlow(FlowName, null, Pk);

                await LoadForm();
                _loading = false;
                StateHasChanged();
            }

            await base.OnAfterRenderAsync(firstRender);
        }
        catch (Exception exc)
        {
            _contentController.PopulateException(exc);
            ShowPopup();
        }
    }

    private async Task LoadForm()
    {
        //try
        //{
        //    if (string.IsNullOrEmpty(RefId))
        //    {
        //        return;
        //    }

        //    if (IsDefaultReadonlyView)
        //    {
        //        await _contentController.LoadFlowDefaultForm(RefId);
        //    }
        //    else
        //    {
        //        await _contentController.LoadFormForFlow(FlowName, RefId);

        //        // render default view if access denied
        //        if (_contentController.FormAccessDenied)
        //        {
        //            IsDefaultReadonlyView = true;
        //            await _contentController.LoadFlowDefaultForm(RefId);
        //        }
        //    }
        //}
        //catch (Exception exc)
        //{
        //    _contentController.PopulateException(exc);
        //    ShowPopup();
        //}
    }

    private void CancelClick()
    {
        if (!string.IsNullOrEmpty(NavigationCancel))
        {
            _navigationManager.NavigateTo(NavigationCancel);
        }
        else if (!string.IsNullOrEmpty(NavigationSuccess))
        {
            _navigationManager.NavigateTo(NavigationSuccess);
        }
    }

    private async Task CancelFinishClick(string binding)
    {
        _formLocked = true;
        StateHasChanged();

        try
        {
            if (!string.IsNullOrEmpty(NavigationCancel))
            {
                _navigationManager.NavigateTo(NavigationCancel);
            }
            else if (!string.IsNullOrEmpty(NavigationSuccess))
            {
                _navigationManager.NavigateTo(NavigationSuccess);
            }
        }
        finally
        {
            _formLocked = false;
            StateHasChanged();
        }
    }

    private async Task ValidateClick()
    {
        _formLocked = true;
        StateHasChanged();
        try
        {
            var result = await _contentController.TriggerRules(_contentController.FormData.ProcessTaskTypeFullName, null, FormRuleTriggers.Submit);
            _contentController.Validations = result.Validations.AsEnumerable().Union(_contentController.GetDynamicFieldValidations());
            StateHasChanged();
        }
        finally
        {
            _formLocked = false;
            StateHasChanged();
        }
    }

    private async Task ActionButtonClick(string binding, string caption)
    {
        _formLocked = true;
        StateHasChanged();
        try
        {
            //await _contentController.ActionButtonClick(binding);
            switch (binding)
            {
                case ModelBinding.CloseButtonBinding:
                    CancelClick();
                    break;

                case ModelBinding.CloseFinishButtonBinding:
                    await CancelFinishClick(binding);
                    break;

                case ModelBinding.ValidateButtonBinding:
                    await ValidateClick();
                    break;

                case ModelBinding.SubmitButtonBinding:
                    await ProcessSubmit(loadForm: true);
                    break;

                case ModelBinding.SubmitCloseButtonBinding:
                    await ProcessSubmit(loadForm: false);
                    break;

                case ModelBinding.SaveButtonBinding:
                    await ProcessSave(binding);
                    break;

                case ModelBinding.RejectButtonBinding:
                    await ProcessReject(binding, caption);
                    break;
            }
        }
        catch (Exception exc)
        {
            _contentController.PopulateException(exc);
            ShowPopup();
        }
        finally
        {
            _formLocked = false;
            StateHasChanged();
        }
    }

    private async Task ProcessSave(string actionBinding)
    {
        //await _contentController.SaveForm(RefId, actionBinding, _contentController.SaveActionName);
        _navigationManager.NavigateTo(NavigationSuccess);
    }

    private async Task ProcessSubmit(bool loadForm = false, bool refresh = false)
    {
        try
        {
            var result = await _contentController.TriggerRules(_contentController.FormData.ProcessTaskTypeFullName, null, FormRuleTriggers.Submit);
            _contentController.Validations = result.Validations.AsEnumerable().Union(_contentController.GetDynamicFieldValidations());

            if (_contentController.Validations.Any(v => v.ValidationResult == RuleValidationResult.Error))
            {
                await ShowAlert();
                //await MatDialogService.AlertAsync("Please fix issues with input fields above to Submit the form");
                return;
            }

            // ToDo: fix threads deadlock
            await Task.Run(async () =>
            {
                //await _contentController.SubmitFormForFlow(RefId, ModelBinding.SubmitButtonBinding, _contentController.SubmitActionName);
                await _contentController.SubmitSilentFlowForm(FlowName, ModelBinding.SubmitButtonBinding);
            });

            var context = _contentController.Context;

            // if next task is form again
            if (loadForm && context.ExecutionResult.IsFormTask && await _contentController.CheckUserAccessFlowContext(_contentController.FormData, context))
            //if (context.ExecutionResult.IsFormTask && (string.IsNullOrEmpty(context.AssignedUser) || context.AssignedUser == _authState.UserLogin))
            {
                // reload page
                _contentController.ClearData();
                await LoadForm();
            }
            else if (refresh)
            {
                _navigationManager.NavigateTo(_navigationManager.Uri, true);   
            }
            else if (!string.IsNullOrEmpty(NavigationSuccess))
            {
                _navigationManager.NavigateTo(NavigationSuccess);
            }
            else
            {
                await FormSubmitted.InvokeAsync(new FormSubmittedArgs { Context = _contentController.Context });
            }
        }
        catch (Exception exc)
        {
            _contentController.PopulateException(exc);
            ShowPopup();
        }
    }

    private async Task ShowAlert()
    {
        _alertDialogIsOpen = true;
    }

    private async Task SubmitClick(string binding)
    {
        _formLocked = true;
        StateHasChanged();
        try
        {
            if (binding == ModelBinding.CloseButtonBinding)
            {
                CancelClick();
                return;
            }

            var result = await _contentController.TriggerRules(_contentController.FormData.ProcessTaskTypeFullName, null, FormRuleTriggers.Submit);
            _contentController.Validations = result.Validations.AsEnumerable().Union(_contentController.GetDynamicFieldValidations());

            if (_contentController.Validations.Any(v => v.ValidationResult == RuleValidationResult.Error))
            {
                return;
            }

            // ToDo: fix threads deadlock
            await Task.Run(async () =>
            {
                //await _contentController.SubmitFormForFlow(RefId, binding);
                await _contentController.SubmitSilentFlowForm(FlowName, binding);
            });

            var context = _contentController.Context;

            // if next task is form again
            if (context.ExecutionResult.IsFormTask && await _contentController.CheckUserAccessFlowContext(_contentController.FormData, context))
            //if (context.ExecutionResult.IsFormTask && context.AssignedUser != null && context.AssignedUser == _authState.UserLogin)
            {
                // reload page
                _contentController.ClearData();
                await LoadForm();
            }
            else if (!string.IsNullOrEmpty(NavigationSuccess))
            {
                _navigationManager.NavigateTo(NavigationSuccess);
            }
            else
            {
                await FormSubmitted.InvokeAsync(new FormSubmittedArgs { Context = _contentController.Context });
            }
        }
        catch (Exception exc)
        {
            _contentController.PopulateException(exc);
            ShowPopup();
        }
        finally
        {
            _formLocked = false;
            StateHasChanged();
        }
    }

   private async Task SubmitDialog(MouseEventArgs args, bool isConfirmed)
    {
        if (isConfirmed)
        {
            _formLocked = true;
            StateHasChanged();

            try
            {
                if (_buttonBinding == ModelBinding.CloseButtonBinding)
                {
                    CancelClick();
                    return;
                }

                // ToDo: fix threads deadlock
                await Task.Run(async () =>
                {
                    //await _contentController.RejectFormForFlow(RefId, buttonBinding, _contentController.RejectActionName);
                });


                _navigationManager.NavigateTo(NavigationSuccess);

            }
            finally
            {
                _formLocked = false;
                StateHasChanged();
            }
        }
        _dialogIsOpen = false;
    }

    private async Task ProcessReject(string binding, string caption)
    {
        _dialogIsOpen = true;
        _matDialogTitle = $"{caption}?";
        _buttonBinding = binding;
    }

    public async Task ShowPopup()
    {
        if (_contentController.ExceptionType != null && _contentController.ExceptionType != typeof(FlowStopException).Name)
        {
            _notificationService.Notify(NotificationSeverity.Warning, "Operation failed", "Please notify BlazorForms Support");

            _contentController.SaveException(_navigationManager.BaseUri);
        }
    }
}
