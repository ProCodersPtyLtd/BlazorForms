@using BlazorForms.Rendering.State
@using MatBlazor
@using BlazorForms.Forms
@using BlazorForms.FlowRules
@using BlazorForms.Shared.DataStructures

<MatTextField type="number" step="0.01" min="0" max="100" Icon="%" IconTrailing="true" Value="@PercentValue" Disabled="@Field.DisplayProperties.Disabled"
              Required="@Field.DisplayProperties.Required" TValue="decimal?" ValueChanged="@(a => ValueChanged(a))" Label="%" Style="width: 100%;"></MatTextField>

<ValidatorControl Validations="@Validations"></ValidatorControl>

@code {
    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public FieldControlDetails Field { get; set; }
    [Parameter]
    public string Caption { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public decimal? PercentValue { get; set; }

    [Parameter]
    public IEnumerable<RuleExecutionResult> Validations { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }

    void ValueChanged(object val)
    {
        decimal dec;

        if (decimal.TryParse(val.ToString(), out dec))
        {
            PercentValue = dec;
        }
        else
        {
            PercentValue = null;
        }

        ModelValueChanged.InvokeAsync(new ValueChangedArgs { Binding = Field.Binding, NewValue = PercentValue, RowIndex = RowIndex });
    }
}
