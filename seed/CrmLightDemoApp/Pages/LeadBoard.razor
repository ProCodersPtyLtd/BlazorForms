@page "/lead-board"
@using BlazorForms.Rendering.Interfaces
@using BlazorForms.Flows.Definitions
@using BlazorForms.Rendering.State
@using BlazorForms.Rendering.Model
@using BlazorForms.Rendering.MudBlazorUI.Components
@using BlazorForms.Shared;
@using CrmLightDemoApp.Onion.Domain
@using CrmLightDemoApp.Onion.Services.Abstractions;
@using CrmLightDemoApp.Onion.Services.Flow
@using CrmLightDemoApp.Onion.Services.Model;
@using MudBlazor

@inject IBoardService _boardService

<FlowBoard TFlow=BoardStateFlow TItem=BoardCardModel Caption="Lead Board" Items=@_items ItemsChanged=@ItemsChanged />

@code {
    private List<BoardCardModel> _items = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        _items = await _boardService.GetBoardCardsAsync();
    }

    private async Task ItemsChanged(List<BoardCardChangedArgs<BoardCardModel>> list)
    {
        var creating = list.Where(x => x.Type == ItemChangedType.Creating).ToList();
        creating.ForEach(async a => await _boardService.CreatingBoardCardAsync(a.Item));

        var deleted = list.Where(x => x.Type == ItemChangedType.Deleted).ToList();
        deleted.ForEach(async a => await _boardService.DeleteBoardCardAsync(a.Item));

        var added = list.Where(x => x.Type == ItemChangedType.Added).ToList();
        added.ForEach(async a => await _boardService.CreateBoardCardAsync(a.Item));

        var changed = list.Where(x => x.Type == ItemChangedType.Changed 
            || x.Type == ItemChangedType.State
            || x.Type == ItemChangedType.Order).ToList();

        changed.ForEach(async a => await _boardService.UpdateBoardCardAsync(a.Item));

        await LoadItems();
        StateHasChanged();
    }

    private ListFormOptions Options = new ListFormOptions
    {
        Variant = Variant.Outlined,
        MudBlazorProvidersDefined = true
    };
}
